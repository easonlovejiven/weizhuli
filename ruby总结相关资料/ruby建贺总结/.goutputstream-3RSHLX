#1,用ROR查询uid=2637370927，WeiboAccount里面这些属性，(UID 昵称 位置 性别 粉丝 关注 微博 注册时间 认证信息 认证原因 )(用csv文件的格式给显示出来)
#(1)
  def self.getProperty(uid)
  @uid = uid
  records = %w{UID 昵称 位置 性别 粉丝 关注 微博 注册时间 认证信息 认证原因 }
  records = WeiboAccount.by_id <<-EOF
  select * from weibo_accounts where uid = #{@uid}
  EOF
  end
  end
#(2)  
  filename = "get.csv"
  CSV.open filename,"wb" do |csv|
  uids = [1667918954,1928244585,2533448835,2031482343,1660521332,3103768347,2580392892,1658388965,2188971353,1881301247]
  csv << %w{UID 昵称 位置 性别 粉丝 关注 微博 注册时间 认证信息 认证原因}
  uids.each do |uid|
  weibo = WeiboAccount.find_by_uid(uid)
  case weibo.gender
  when weibo.gender == 1
    sex = '男'
  when weibo.gender == 0 
    sex = '女'
  else 
    sex = '妖'
  csv << [weibo.uid,weibo.screen_name,weibo.location,sex,weibo.followers_count,weibo.friends_count,weibo.statuses_count,weibo.created_at,weibo.geo_enabled]
    end
   end
  end
  #封装一个方法用于求出1加到n的和

  class SUM
  def self.getSum(n)
  (1..n).inject do |sum,i|
  1*sum+i
  end
  end
  end
  
  #判断一个数组当中是否包含另一个数组的元素(匹配一些帐号是否在另外的一些帐号当中)
  #path是否有元素在path1里边儿
  filename = "数组元素是否存在是否存在.csv"
  CSV.open filename,"wb" do |csv|
  array1 = ["a","b","c"]
  array2 = ["a","b","c","d","e"]
    keywords = []
    csv << %w{元素 新老}
    array1.each do |line|
      keywords << line.strip
    end 
    array2.each do |line|
      isinclude = keywords.include?(line.strip) ? '有' : '没有'
      csv << [line,isinclude]
    end
  end
  
  #写一个计算器

  class Oper
  def self.add(numA,numB)
  @numA = numA
  @numB = numB
  return @numA+@numB
  end

  def self.jian(numA,numB)
  @numA = numA
  @numB = numB
  return @numA-@numB
  end

  def self.cheng(numA,numB)
  @numA = numA
  @numB = numB
  return @numA*@numB
  end

  def self.chu(numA,numB)
  @numA = numA
  @numB = numB
  return @numA/@numB
  end

  end

  #重点

  #1,用ROR查询uid=2637370927，WeiboAccount里面这些属性，(UID 昵称 位置 性别 粉丝 关注 微博 注册时间 认证信息 认证原因 )
  def get_user(uid)
    puts WeiboAccount.where("uid = ?",uid)
  end
  #我想要一下上周（8.12-8.18）英特尔中国、超极本的参与互动(WeiboComment(评论),WeiboForward(转发)得到这些uid然后去除重复的就行)的总人数~
  filename = "fan.csv" 
  CSV.open filename,"wb" do |csv|
  csv << %w{帐号 总粉丝数量} # 打印 csv 第一行
  names = %w{英特尔中国 美丽说 易迅网 戴尔中国 ThinkPad小黑 联想 Snapdragon骁龙 三星电子 杜蕾斯}
  names.each do |name|
  uid = WeiboAccount.find_by_screen_name(name).uid
  wur_num = WeiboUserRelation.where("uid = ? and follow_time between ? and ?",uid,'2014-08-09','2014-08-11').count 
  csv << [name,wur_num]#循环打印 第N行 数据
  end
  end

  #查询最近50条微博的转发数和评论数(并得到名称)(有问题:得到每条微博的转发数和评论数的各自的sum)

  filename = 'z_p.csv'
  CSV.open filename,"wb" do |csv|
  f_sum = 0 #转发的总数
  c_sum = 0 #评论的总数
  csv = %w{转发数量 评论数量}
  forwards = WeiboForward.order('forward_at desc').limit(50)
  commends = WeiboComment.order('comment_at desc').limit(50)
  
  csv << [z_num,p_num]
  end

    def get
    uids = []
    fors =  WeiboForward.order('forward_at desc').limit(50)
    fors.each do |forr|
      uids = forr.uid
    end
    puts uids.size
    end

    def get
    uids = []
    fors =  WeiboComment.order('comment_at desc').limit(50)
    fors.each do |forr|
      uids = forr.uid
    end
    puts uids.size
    end

  #查询(8.9-8.12)这两天的听众人数各有多少(有问题)

  filename = "tingzhong.csv"
  CSV.open filename,"wb" do |csv|
  csv << %w{日期 听众人数}
  dates = ['2014-08-09','2014-08-12']
  count = WeiboUserRelation.where("follow_time between ? and ?",'2014-08-08','2014-08-09').count
  counts = WeiboUserRelation.where("follow_time between ? and ?",'2014-08-10','2014-08-11').count
  num = [count,counts]
    dates.each do |date|
      csv << [date]
    end
    num.each do |n|
      csv << [n]
    end
  end

  #我想要一下上周（8.12-8.18）英特尔中国: 2637370927,、美丽说: 2183473425 的参与互动的总人数
  def get_interact_count(uid,begin_time,end_time)
    array = []
    forwards = WeiboForward.where("uid = ? and forward_at between ? and ?",uid,begin_time,end_time)
    comments = WeiboComment.where("uid = ? and comment_at between ? and ?",uid,begin_time,end_time)
    forwards.each do|forward|
      array << forward.forward_uid
    end
    comments.each do|comment|
      array << comment.comment_uid
    end
    puts array.uniq.size
  end
  
   #调取日期： 8月9日 & 8月10日 两天的听众数各是多少
   def get_follows_count
    follows = []
    follow_counts = WeiboAccount.where("updated_at between ? and ?",'2014-08-08','2014-08-09')
    follow_counts.each do |follow|
      follows << follow.bi_followers_count
    end
   end

  #每近50条微博的平均互动数（转发+评论）
  def get_cr_avg_count(uid)
    comments = []
    reposts = []
    sum = 0
    avg = 0
    array = WeiboDetail.where("uid = ?",uid).order('updated_at desc').limit(50)
    array.each do |detail|
      sum += detail.comments_count+detail.reposts_count
    end
    avg = sum/50
  end
  #7月1号和7月31号的总粉丝数的总粉丝数
  def get_sum_follow(start_time,end_time)
    follows = WeiboAccount.where("updated_at between ? and ?",start_time,end_time)
    follows.each do |follow|
      sum += follow.followers_count
    end
      sum
  end
  #查询特定帐号的粉丝总数
  def get_follow_count_by_uid(uid)
    sum = 0
    arrays = WeiboAccount.where("uid = ?",uid)
    arrays.each do |array|
      sum = array.followers_count
    end
      sum
  end
  #调取日期： 8月9日(1522843) & 8月10日(62672) 两天的听众数(总粉丝数)各是多少(每次调用方法时传递两个日期参数然后得到总粉丝数量)beautiful
  def get_follows_by_date(start_time,end_time)
    sum = 0
    uids = []#用来存放WeiboUserRelation表当中的数据
    follows = []#用来存放WeiboRelation表当中的数据
    uids = WeiboUserRelation.where("follow_time between ? and ?",start_time,end_time)
    uids.each do |u|
      follows = WeiboAccount.where("uid = ?",u.uid)
    end    
    follows.each do |follow|
      sum += follow.followers_count
   end
    sum
  end
  #查询出没有关注数的uid(这个方法数据量太大不能运行)
  def get_not_friends_count
    #用来存放没有关注数的微博信息
    friends = []
    uids = []    
    friends = WeiboAccount.where("friends_count = ?",0).limit(100)
    friends.each do |f|
      uids << f.uid
    end
    uids
    uids.size
  end
  
  # (32014-08-23-----2014-08-24)俩个时间断内的新增粉丝数(22727410578)
  # 29757641079(2014-8-24,2014-08-25)
  def get_newFans_by_date(begindate,endate)
    sum = 0
    wurs = [] #存放这个时间断内的所有记录(这个是为了得到这些记录的uid)
    fans = [] #存放这个时间段内的每条记录
    wurs= WeiboUserRelation.where("created_at between ? and ?",begindate,endate)
    wurs.each do |wur|
      fans = WeiboAccount.where("uid = ?",wur.uid)
      fans.each do |f|
        sum += f.followers_count
      end
    end 
    puts sum
  end
  
  #接口提取微博列表(根据uids)
  1667918954 红孩子母婴网
  1928244585 多美滋1000日计划
  2533448835 中国三星
  2031482343 三星手机官网
  1660521332 三星电子
  3103768347 索尼中国
  2580392892 索尼影像圈
  1658388965 索尼Xperia
  2188971353 NIKE
  1881301247 上海大众汽车大众品牌

  #以列表的形式显示出来
  filename = "xianshi.csv"
  CSV.open filename,"wb" do |csv|
  csv << %w{帐号 名称}
  uids = [1667918954,1928244585,2533448835,2031482343,1660521332,3103768347,2580392892,1658388965,2188971353,1881301247]
  uids.each do |uid|
    name = WeiboAccount.find_by_uid(uid).screen_name 
    csv << [uid,name]
  end
 end

  #去除重复的uid
  filename = "uniq.csv"
  CSV.open filename,"wb" do |csv|
  csv << %w{uid}
  $uidss.each do |uid|
  csv << [uid]
  end
 end

  #得到腾讯微博的前20条openid
  def get_openid
    tqqs = TqqAccount.limit(20)
    tqqs.each do |tqq|
     openids = tqq.openid
    end
    puts 
   end 

  #提取腾讯微博列表(server/weibo-marketing/app/models/tqq_weibo_detail)

  filename = "ts.csv"
  CSV.open filename,"wb" do |csv|
  csv << %w{微博内容 文章 转发数量 评论数量 微博地址 来源 类型 起源}
  tqqweibos = TqqWeiboDetail.where("openid = '0B6A468C0642625453023BFB0D1B8570' and updated_at between ? and ?",'2014-08-01','2014-08-27')
  tqqweibos.each do |tw|
    #封装了一个to_row方法
    csv << tw.to_row
   end
  end

  #
  http://weibo.com/2637370927/Bb6n90bcq
  http://weibo.com/2637370927/BaWfrdYBi
  http://weibo.com/2637370927/BaOnVErrc
  http://weibo.com/2637370927/BaEN75b2S
  http://weibo.com/2637370927/BavV5vHtw

  http://weibo.com/2637370927/BiovQwp1V
  http://weibo.com/2637370927/BkdHV9ksh
  http://weibo.com/2637370927/Bk4buq2Hr
  http://weibo.com/2637370927/BjUNLfmjH
  http://weibo.com/2637370927/BjsRo1IYW

  http://weibo.com/2637370927/BjiP77uwE
  http://weibo.com/2637370927/Bj9KGF3jB
  http://weibo.com/2637370927/Bj09V3R6R
  http://weibo.com/2637370927/BiQT87jc8
  http://weibo.com/2637370927/Bif1pl6pC

  http://weibo.com/2637370927/Bi5znBXqy
  http://weibo.com/2637370927/BhW4X0AWQ
  http://weibo.com/2637370927/BhMLncOZG
  http://weibo.com/2637370927/BhkqFbJPf
  http://weibo.com/2637370927/BhbHSiDLO

  http://weibo.com/2637370927/Bh1Grmd5R
  http://weibo.com/2637370927/BgTs2x6ka
  http://weibo.com/2637370927/BaOnVErrc
  http://weibo.com/2637370927/B8w2QolVs
  http://weibo.com/2637370927/B8kijvBnw

  http://weibo.com/2637370927/B8CL0bVgl
  http://weibo.com/2637370927/B8Gunrc1J
  http://weibo.com/2637370927/B8Pkwg4G0
  http://weibo.com/2637370927/BbR92DXYm
  http://weibo.com/2637370927/BfmCEBHTW

  http://weibo.com/2637370927/BaWfrdYBi
  http://weibo.com/2637370927/B9Au48hW8
  http://weibo.com/2637370927/BbqaNjdtK
  http://weibo.com/2637370927/BbpGgomCb
  http://weibo.com/2637370927/Bd5gK0EeH

  http://weibo.com/2637370927/Bd2ZB1e2F
  http://weibo.com/2637370927/BgJxe5WwY
  http://weibo.com/2637370927/BgZtDyYbp

  #接口提取微博列表
  description << EOF
  接口导出 根据UID列表 导出微博详情列表
  数据列包括:微博详情信息

  #(1)平均粉丝数;(2)每种认证类型的人数;(3)注册时间小于一年的,一到两年的,两年以上的;(4)平均活跃度;(5)有多少人最近七天发了微博，两条以上的

  (1)def avg
    results = 0
    $fans.each do |fan|
      results += fan.to_i
    end
    puts results/$fans.size => 1764
  end
  (2)
  e.each{|a| hash[a.split(",")[0]]||=0; hash[a.split(",")[0]]+=1}
  {"认证类型"=>1, "达人"=>2190, "未认证"=>6817, "未审核达人"=>704, "名人"=>869, "企业"=>16, "微博女郎"=>8, "网站"=>4, "媒体"=>2, "校园"=>2}
  (3)
   def get_date
    $dates.each do |d,i|
      puts i
     end
    end
  (4)10.887
  (5)
   def get
    no = 0
    two = 0
    $ftl.each do |f|
        if(f.to_i == 0)
          no += 1
        end
        if(f.to_i > 2)
           two += 1
        end 
    end
    puts [no,two]
   end
  没有发的:1417
  两条以上的:5308
  有多少人发的:9140 

  #帖子列表，分为5各部分，分别是自7月1日以来的KOL帖子列表，微博精选推广帖子列表、粉丝头条帖子列表、品牌速度帖子列表，原创未推广帖子列表。请分别跑一下以下数据：
  1、上面5类的帖子列表，包含发布时间，互动次数
  2、5类帖子列表所产生的所有转发、评论的话术(内容)

  3、针对第2条所提取的所有转发、评论话术进行去重分析，分析有多少独立用户贡献；
  4、分别分析这些互动人的属性，地域，性别，认证，微博注册时间段、粉丝数、活跃度、7天内发布微博的次数、以及近2个月内，与英特尔微博互动的次数
  5、分别分析这5部分互动内容的情感分析，按照正面、中面

  负面划分，如果有正面、负面，请提供正面，负面互动内容列表，方便我做展示；
  6、分别分析这5部分互动内容中，有多少条是包含附件中所包含的关键词

   #导出筛选后的uid

   filename = "pinpai_uniq_uid.csv"
    CSV.open filename,"wb" do |csv|
    csv << %w{uid}
    $pinpai.each do |uid|
    csv << [uid]
    end
   end

  #根据uid抛出评论数,转发数,评论+转发(互动数)

  filename = "jingxuan_comment_forward.csv"
   sum = 0
  CSV.open filename,"wb" do |csv|
   csv << %w{UID 评论数 转发数 互动数}
    $uids.each do |uid| 
    comment_num = WeiboComment.where("uid = ?",2637370927).where("comment_at > ?",'2014-06-01').where("comment_uid = ?",uid).count
    forward_num = WeiboForward.where("uid = ?",2637370927).where("forward_at > ?",'2014-06-01').where("forward_uid = ?",uid).count
    sum = comment_num + forward_num
    csv << [uid,comment_num,forward_num,sum]
    end
  end

  #这是通过name去得到从号的uid,和上边儿多了一个步骤
  filename = "互动次数-7.csv"  #3637213449765372
  CSV.open filename,"wb" do |csv|
  csv << %w{uid 转发 评论 互动数}
  intel = 1747360663#2637370927#2295615873   #2637370247
    path = File.join(Rails.root, "db/name")
    File.open(path,"r").each do |name|
    uid = ReportUtils.names_to_uids([name.strip],true).first
    forwards = WeiboForward.where("uid = ? and forward_uid = ? ",intel,uid ).count
    comments = WeiboComment.where("uid = ? and comment_uid = ? ",intel,uid ).count
    csv << [uid,forwards,comments,forwards+comments]
    end
  end

  #双帐号粉丝列表(intel)(路径解决问题)
  filename = "互动人转发评论的内容.csv"
  CSV.open filename,"wb" do |csv|
    comment_date = "" #评论日期
    forward_date = "" #转发日期
    comment_text = "" #评论内容
    forward_text = "" #转发内容
    @uids = open '/home/rails/Desktop/uuu.rb'#文件的路径
    @uids = @uids.read
    @uids = @uids.strip.split("\n")
    url = ""
    csv << %w{UID 内容 日期 url 类别}
    @uids.each do |uid|
    comments = WeiboComment.where("uid = ? and weibo_id = ?",2637370927,3751391170082231)
    forwards = WeiboForward.where("uid = ? and weibo_id = ?",2637370927,3751391170082231)
      comments.each do |comment|
        comment_date = comment.comment_at
        comment_text = MComment.find(comment.comment_id).text
        url = "http://weibo.com/"+(comment.uid).to_s+"/"+WeiboMidUtil.mid_to_str(comment.weibo_id.to_s) #
        comment_text.blank? ? csv << [uid,nil,comment_date,url,'评论'] : csv << [uid,comment_text,comment_date,url,'评论']
      end
      forwards.each do |forward|
        forward_date = forward.forward_at
        forward_text = MForward.find(forward.forward_id).text
        url = "http://weibo.com/"+(forward.uid).to_s+"/"+WeiboMidUtil.mid_to_str(forward.weibo_id.to_s)
        forward_text.blank? ? csv << [uid,nil,forward_date,url,'转发'] : csv << [uid,forward_text,forward_date,url,'转发']
      end
    end
  end

  #将一个csv文件写入另一个csv文件里边儿
  filename = "new_xph_fans_list.csv"
  CSV.open filename,"wb" do |csv|
    old_csv = CSV.open '/home/rails/Desktop/xph_fans_list.csv'
    old_csv.each do |old|
      csv << [old]
    end
  end  
  
  #eva(内容正负面影响)
  #fake_content(此微博是否是有效内容)

  require 'rseg'
  Rseg.load

  @bad_words = %w{} #负面评价，情感
  @good_words = %w{} #正面评价，情感

  filename = "new_xph.csv"
  CSV.open filename,"wb" do |csv|
    csv << %w{UID 内容 日期 url 类别 eva 是否是有效微博}
    
    @bad_words = open '/home/rails/Desktop/fumian.rb'#文件的路径
    @bad_words = @bad_words.read
    @bad_words = @bad_words.strip.split("\n")

    @good_words = open '/home/rails/Desktop/fumian.rb'#文件的路径
    @good_words = @good_words.read
    @good_words = @good_words.strip.split("\n")

    old_csv = CSV.open '/home/rails/server/weibo-marketing/xph_fans_list.csv'#(这个csv文件是没有对内容正负面影响进行统计的csv文件)
    lines = old_csv.read
    lines.each do |line|

      #重点可以这样提数据

      uid = line[0]
      text = line[1]
      date_time = line[2]
      url = line[3]
      type = line[4]

      words = Rseg.segment text.to_s #关键词提取
      eva = 0
      @good_words.each{|w|
        good = w.strip
        if words.include?(good)
          eva = 1
          break;
        end
      }
      eva == 0 && @bad_words.each{|w|
        bad = w.strip
        if words.include?(bad)
          eva = -1
          break;
        end
      }
      fake_content = !text == "转发微博" || text.gsub(/\[[^\]]+\]/,"").blank?
      if(uid="UID" && text="内容" && date_time="日期" && url="url" && type="类别" && eva="eva" && fake_content="是否是有效微博")
        csv << [uid,text,date_time,url,type,eva,fake_content]
      end 
    end
  end

  #查看有( 回复@英特尔中国(芯品汇) )的内容（重点分页）
  filename = "xinpinhui.csv"
  CSV.open filename,"wb" do |csv|
    csv << %w{内容}
    page = 1
    while true
      comments = WeiboComment.where("uid = ?",2637370247).where("comment_at > ?",'2014-07-01').paginate(per_page:1000, page:page)
      break if comments.blank?
      comments.each do |comment|
        mc = MComment.find(comment.comment_id)
        if !mc.blank? #如果不等于空的话(这块儿做了个非空的判断)
          content = mc.text
          if content.include?("回复@英特尔芯品汇")
            csv << [content]
          end
        end
       end
      page+=1
     end
    end

  #(转发的微博用户的uid和转发这条微博的人的url,以及转发的日期)只要转发的数据  注意:这个url是转发人的uid

  filename = "new_intel_fans_list.csv"
  CSV.open filename,"wb" do |csv|
    forward_date = "" #转发日期
    url = ""
    csv << %w{UID url 日期}
    @uids.each do |uid|
    forwards = WeiboForward.where("uid = ?",2637370927).where("forward_at > ?",'2014-07-01').where("forward_uid = ?",uid).all
      forwards.each do |forward|
        forward_date = forward.forward_at
        url = "http://weibo.com/"+(forward.forward_uid).to_s+"/"+WeiboMidUtil.mid_to_str(forward.forward_id.to_s)
        csv << [uid,url,forward_date]
      end
    end
  end
  
  #重点从文件读一些uid,看看这些uid是否关注一个主号

  filename  = "是否关注主号.csv"
  CSV.open(filename,"wb") do|csv|
    csv << %w{uid 是否是英特尔商用频道粉丝 }
    #主号
    intel = '2637370927'
    path = File.join(Rails.root,"db/uid1") #这个意思是从db/uid这个文件当中拿到这些uid
     #这个路径默认是在server/weibo-marketing下的
    File.open(path,"r").each do|uid|
     uid << uid.strip
     fans = WeiboUserRelation.where("uid = ? and by_uid = ?",intel,uid)
     isfans = fans.blank? ? '不是' : '是'#follow_time关注这个主号的时间 判断这个uid是否是intel的fans
     csv << [uid,isfans]
    end
  end

  #根据name提取粉丝信息

  filename  = "根据name提取粉丝信息.csv"
  CSV.open(filename,"wb") do|csv|
        csv << %w{name uid 粉丝数 }
  path = File.join(Rails.root,"db/name3")
    File.open(path,"r").each do|name|
     name = name.strip
     fans = WeiboAccount.where("screen_name = ?",name).first
     csv << [name,fans.uid,fans.friends_count]
    end
  end
  
  #根据name读取与英特尔中国互动次数  互动微博地址 金融街购物中心微博:1924531943(小文)
  
  @intel = 1924531943 #金融街购物中心微博
  @url = []
  CSV.open "d根据name读取与英特尔中国互动次数  互动微博地址.csv", "wb" do |csv|
    csv << %w{UID 姓名  互动次数	 互动微博地址 }
    path = File.join(Rails.root,"db/name3")
    names = [] #用于存取读取的name
    File.open(path,"r").each do|name|
    name =  name.strip
    uid = ReportUtils.names_to_uids([name]) #根据name得到uids
    forwards = WeiboForward.where("uid = ? and forward_uid = ? ",@intel,uid[0]) #转发数
    comments = WeiboComment.where("uid = ? and comment_uid = ? ",@intel,uid[0]) #评论数
    if !forwards.nil? #如果转发数量不为空的话,循环遍历根据weibo_id取出一条微博记录,并得到这条微博的url
     forwards.each do |forward|
        weibo = WeiboDetail.where("weibo_id = ?",forward.weibo_id).first
        @url << weibo.url
     end
    end
    if !comments.nil?
     comments.each do|comment|
        weibo = WeiboDetail.where("weibo_id = ?",comment.weibo_id).first
        @url << weibo.url
     end
    end
   forward_count = WeiboForward.where("uid = ? and forward_uid = ? ",@intel,uid[0],).count
   comment_count = WeiboComment.where("uid = ? and comment_uid = ? ",@intel,uid[0]).count
   csv << [uid[0], name,forward_count+comment_count,@url.uniq*","]
   end
  end
  
  #
  
  #从接口提取 一个人的粉丝（存库里）
  
  #在一些帐号中找出哪些帐号被屏蔽(注:只导出被屏蔽的帐号)
  
  task = GetUserTagsTask.new
  filename = "被屏蔽的帐号.csv"
  path = File.join(Rails.root, "db/uuu.rb")
  CSV.open filename,"wb" do |csv|
   csv << %w{uid}
   number = 1
   File.open(path,"r").each do|uid|
      uid = uid.strip
      begin
      #stable这个方法是当用户要去连接接口的时候，可能会出现各种状况的异常，其主要作用是对可能出现的异常进行处理
      res = task.stable{task.api.users.show(uid)}
      rescue Exception =>e
        if e.message =~ / does not exist!/ #=~ 用于正则表达式匹配
           csv << [uid]
        end
      end
      number+=1
   end
  end
  

  #7,8月份分开抛(uid 内容 互动时间 原微博url 类别 有效性 正负面 每页1000条数据) 英特尔中国和芯品汇的
  #用于内容正负面判断的
  require 'rseg'
  Rseg.load

  @bad_words = %w{} #负面评价，情感
  @good_words = %w{} #正面评价，情感  

  filename = "intel_zfm_yx.csv"
  CSV.open filename,"wb" do |csv|
    csv << %w{uid 内容 互动时间 原微博url 类别 有效性 正负面}
    @bad_words = open '/home/rails/Desktop/fumian.rb'#文件的路径
    @bad_words = @bad_words.read
    @bad_words = @bad_words.strip.split("\n")

    @good_words = open '/home/rails/Desktop/zhengmian.rb'#文件的路径
    @good_words = @good_words.read
    @good_words = @good_words.strip.split("\n")
    page = 1
    while true
      comments = WeiboComment.where("uid = ? and weibo_id = ?",2637370247,3751391170082231).paginate(per_page:1000, page:page)
      break if comments.blank?
      comments.each do |comment|
        uid = comment.comment_uid
        comment_date = comment.comment_at  
        url = "http://weibo.com/"+(comment.comment_uid).to_s+"/"+WeiboMidUtil.mid_to_str(comment.comment_id.to_s)
        mc = MComment.find(comment.comment_id)
        if !mc.blank? #如果不等于空的话(这块儿做了个非空的判断)
          content = mc.text #内容
          fake_content = !content == "转发微博" || content.gsub(/\[[^\]]+\]/,"").blank? #有效性
          words = Rseg.segment content.to_s #以下是正负面判断
          eva = 0   
          @good_words.each{|w|
            good = w.strip
            if words.include?(good)
              eva = 1
              break;
            end
          }
            eva == 0 && @bad_words.each{|w|
              bad = w.strip
              if words.include?(bad)
                eva = -1
                break;
              end
            }
            csv << [uid,content,comment_date,url,'评论',fake_content,eva]
        end
       end
      page+=1
     end
      page = 1
     while true
      forwards = WeiboForward.where("uid = ? and weibo_id = ?",2637370247,3751391170082231).paginate(per_page:1000, page:page)
      break if forwards.blank?
      forwards.each do |forward|
        uid = forward.forward_uid
        forward_date = forward.forward_at
        url = "http://weibo.com/"+(forward.forward_uid).to_s+"/"+WeiboMidUtil.mid_to_str(forward.forward_id.to_s)
        fc = MForward.find(forward.forward_id)
        if !fc.blank? #如果不等于空的话(这块儿做了个非空的判断)
          content = fc.text
          fake_content = !content == "转发微博" || content.gsub(/\[[^\]]+\]/,"").blank?
          words = Rseg.segment content.to_s #正负面
          eva = 0   
          @good_words.each{|w|
            good = w.strip
            if words.include?(good)
              eva = 1
              break;
            end
          }
            eva == 0 && @bad_words.each{|w|
              bad = w.strip
              if words.include?(bad)
                eva = -1
                break;
              end
            }
            csv << [uid,content,forward_date,url,'评论',fake_content,eva]
        end
       end
      page+=1
     end
    end

  #通过name导出uid
  filename = "names_to_uids.csv"
  CSV.open filename,"wb" do |csv|
  csv << %w{名称 uid}
  path = File.join(Rails.root, "db/name3")
   File.open(path,"r").each do|line|
      name = line.strip
      uid =  WeiboAccount.find_by_screen_name(name,true).uid
      csv << [name,uid]
    end
  end
  
  #根据uid查阅微博用户的活跃度(这个在WeiboUserEvaluate表当中的数据)
  
  filename = "用户活跃度.csv"
  CSV.open filename,"wb" do |csv|
   csv << %w{uid  活跃度}
   path = File.join(Rails.root, "db/uuu.rb")
   File.open(path,"r").each do|line|
   uid = line.strip
   weiboEvaluates = WeiboUserEvaluate.where("uid = ?",uid)
   evaluates = (weiboEvaluates[0].forward_average/100.0 + weiboEvaluates[0].comment_average/100.0)
    csv << [uid,evaluates]   
    end
  end

  #通过uid 接口  查 这个人在一定时间内发 微薄 原创微博数 和转发微博数(注:通过接口读数据)
  filename = "wyz.csv"
    CSV.open(filename,"wb"){|csv|
    csv << %w{uid 原创微博数 转发微博数}
    path = File.join(Rails.root, "db/wuhan.rb")
    #实例化一个对象
    task = GetUserTagsTask.new
  
  #导出活跃度和关注的时间(这个字段在WeiboUserRelation)
  
  filename = "用户活跃度.csv"
  CSV.open filename,"wb" do |csv|
  @uids = open '/home/rails/Desktop/uuu.rb'#文件的路径
  @uids = @uids.read
  @uids = @uids.strip.split("\n")
   csv << %w{uid  活跃度}
    @uids.each do |uid|
    uid = uid.strip
    forwards = WeiboUserEvaluate.find_by_uid(uid).forward_average/100.0
    comments = WeiboUserEvaluate.find_by_uid(uid).comment_average/100.0
    csv << [uid,forwards+comments]   
    end
  end
  
  #根据uid查询关注主号的时间(主号被uids关注的时间:重点)

  name = "shangyong" #传不同的参数(主号的screen_name),去导出不同主号的信息
  folder = "#{name}-data" #这块儿是指不同帐号要放到不同的文件夹下,以避免不同的帐号时修改太多的变量
  Dir.mkdir folder if !Dir.exist? folder #判断文件夹是否存在,如果不存在就创建一个这样的文件夹
  @url = "db/uuu.rb" #读取文件时可以直接传这个参数
  filename = "根据uid查询关注#{folder}的时间.csv"
  @theno = 2295615873
  CSV.open filename,"wb" do |csv|
    csv << %w{uid time}
    path = File.join(Rails.root,@url)
     File.open(path,"r").each do|line|
     by_uid = line.strip
     weibotime = WeiboUserRelation.select('follow_time').where("uid = ? and by_uid = ?",@theno,by_uid)
     csv << [by_uid,weibotime[0].follow_time]
     end
  end
  
  #根据uid 查询 是不是 intel  的 粉丝 金融街：1924531943 商用频道：2295615873   中国： 2637370927 国际：3869439663   
  
  name = "xinpinhui" #传不同的参数(主号的screen_name),去导出不同主号的信息
  folder = "#{name}-data" #这块儿是指不同帐号要放到不同的文件夹下,以避免不同的帐号时修改太多的变量
  Dir.mkdir folder if !Dir.exist? folder #判断文件夹是否存在,如果不存在就创建一个这样的文件夹
  @url = "db/uuu.rb" #读取文件时可以直接传这个参数
  filename = "#{folder}是否是特定主号的粉丝.csv"
  @theno = '2637370247'  
  CSV.open filename,"wb" do |csv|
    csv << %w{uid 粉丝}
    path = File.join(Rails.root,"db/uuu.rb")
    File.open(path,"r").each do |line|
    uid = line.strip
    uids = WeiboUserRelation.select("by_uid").where("uid = ?",2637370927)
      uids.each do |f_uid|
        founs_on = uid==f_uid ? "是" : "否"
        csv << [uid,founs_on]
      end
    end
  end

  #根据uid 查询 是否关注的是主号的粉丝(这些uid是否关注这个主号)

  name = "xinpinhui" #传不同的参数(主号的screen_name),去导出不同主号的信息
  folder = "#{name}-data" #这块儿是指不同帐号要放到不同的文件夹下,以避免不同的帐号时修改太多的变量
  Dir.mkdir folder if !Dir.exist? folder #判断文件夹是否存在,如果不存在就创建一个这样的文件夹
  @url = "db/uuu.rb" #读取文件时可以直接传这个参数
  filename = "#{folder}数据B1部分非活动贴互动人信息3.csv"
  @theno = '2637370247'
  task = GetUserTagsTask.new
  CSV.open filename,"wb" do |csv|
    csv << %w{uid 是否关注主号}
  path = File.join(Rails.root,@url)
    File.open(path,"r").each do|line|
    uid = line.strip
    begin
    res = task.api.friendships.show(source_id:uid,target_id:@theno)
    rescue Exception=>e
     puts e.message
     csv << [uid]
     next
    end
    csv << [uid,res.source.following ? "是":"否"]
    end
  end

  #导出主号的粉丝(uid)列表  注意:要灵活运用begin .. end它主要用来扩大变量的范围的;如果要是导不同的主号的话,可以直接该文件名称

  name = "xinpinhui" #传不同的参数(主号的screen_name),去导出不同主号的信息
  folder = "#{name}-data" #这块儿是指不同帐号要放到不同的文件夹下,以避免不同的帐号时修改太多的变量
  Dir.mkdir folder if !Dir.exist? folder #判断文件夹是否存在,如果不存在就创建一个这样的文件夹
  filename = "#{folder}的粉丝(uid)列表.csv" #其参数可以根据screen_name/主号uid
  task = GetUserTagsTask.new
  @uid = 2637370247
  CSV.open filename,"wb" do |csv|
     csv <<  ['uid']#WeiboAccount.to_row_title(:full)
      begin
      friend_ids = task.api.friendships.followers_ids(:uid=>@uid, :count=>2000).ids
      friend_ids.each do|uid|
        csv << [uid]
      end
    end
  end

  #查看身份 
  filename = "uid-身份.csv"
    task = GetUserTagsTask.new
    CSV.open filename,"wb" do |csv|
      csv << %w{uid 身份}
      path = File.join(Rails.root,"db/wuhan-uid.rb")
      File.open(path,"r").each do|line|
        uid = line.strip
        #可以根据sql语法去返回所需要的记录(数组)
        records = WeiboUserAttribute.find_by_sql <<-EOF
           select keyword_id from weibo_user_attributes where uid = #{uid}
          EOF
          #存放的是身份关键词的id然后用id进行查询
         type = {85 => "核心KOL",86 => "降级核心KOL",88 => "全量KOL",90 => "全网KOL",}
         if records.size==0  #csv文件处理没有的数据可以直接不写
            csv << [uid]
            next
         end
         row = []
         records.each do |line|
            keyword = type[line.keyword_id] #如果查询的
            if !keyword.nil? 
               row << keyword
            end
         end
         csv << [uid,row*',']
      end
    end

  #提取中国，超级本 评论的其他的内容。
  
  filename = "超级本评论的其他人的信息.csv"
  CSV.open filename,"wb" do |csv|
      csv << %w{UID 官博昵称 评论转发说的内容 发出动作的时间 原微博链接 }
      AUTHED_UID_AND_KEYS = {
      2637370927=>"1075842038", #英特尔中国
      2295615873=>"1384091891", #英特尔商用频道
      1288915263=>"3778658839", #平安北京
      2637370247=>"1075842038", #芯品汇
    }
    appkey = AUTHED_UID_AND_KEYS[2637370247]
    task = GetMentionsTask.new(2637370247,:appkey=>appkey) #得到芯品汇的任务
    page = 1
        processing = true
          begin
            begin
              #count :返回单页数量,默认是50; page :返回的第几页; filter_by_source :来源类型,默认为0;
              res = task.api.comments.by_me(count:50,page:page,filter_by_source:0)
              res.comments.each do |line|
                     row = []
                  if line.nil?
                     processing = false
                     break
                  end
                  str = WeiboMidUtil.mid_to_str line.status.mid #获得连接后的一串字母
                  url = 'http://www.weibo.com/'+ line.status.user.idstr + '/'+ str #匹配的路径
                  csv << [line.id,line.user.name,line.text,Time.parse(line.created_at),url]
              end
            rescue Exception=>e
              puts e.message
            end
            page+=1
          end while processing == true
  end
  
  #匹配一个帐号是否在 一些帐号中（匹配）接口提取
  
  filename = "匹配2.csv"
  CSV.open filename,"wb" do |csv|
      csv << ['uid','新老']
      path = File.join(Rails.root,"db/uid1.rb")
      path1 = File.join(Rails.root,"db/wuhan-uid.rb")
      keywords = []
      File.open(path,"r").each do|line|
        keywords << line.strip
      end
      File.open(path1,"r").each do|line|
        isinclude = keywords.include?(line.strip) ? '有' : '没有'
        csv << [line,isinclude]
      end
  end
  
  filename = "匹配1.csv"
  CSV.open filename,"wb" do |csv|
    csv << %w{UID 新老}
    path = File.join(Rails.root,"db/uid1")
    path1 = File.join(Rails.root,"db/wuhan-uid.rb")
    keywords = []
    File.open(path,"r").each do |line|
      keywords << line.strip
    end 
    File.open(path1,"r").each do |line|
      isinclude = keywords.include?(line.strip) ? '有' : '没有'
      csv << [line.uid,isinclude]
    end
  end

  #根据uid查这个微博用户的注册时间和注册年份
  
  task = GetUserTagsTask.new
  filename = "created_at.csv"
  CSV.open filename,"wb" do |csv|
    csv << %w{UID 注册时间 注册年份}
    path = File.join(Rails.root,"db/wuhan-uid.rb")
      row = []
      File.open(path,"r").each do |line|
        uid = line.strip
        weibo = task.load_weibo_user(uid) #这里需要异常处理
      csv << [uid,weibo.created_at,weibo.created_at.year]
    end
  end

  #根据url查询这条微博的类型
  
   filename = "微博类型.csv"
   path = File.join(Rails.root,"db/wuhan-url.rb")
   CSV.open filename,"wb" do |csv|
      csv <<['url','类型']
      File.open(path,"r").each do |url|
        weibo_id = WeiboMidUtil.str_to_mid URI.parse(url.strip).path.split("/").last
        record=WeiboDetail.find_by_weibo_id(weibo_id.to_i)
        type = case
            when record.image? && record.video?
              "image + video"
            when record.image?
              "image"
            when record.video?
              "video"
            when record.music?
              "music"
            when record.vote?
              "vote"
            else
              "text"
          end
          csv << [url,type]
      end
  end

  #uid去重 互动

  filename = "uid去重1.csv"
  CSV.open filename,"wb" do |csv|
      csv << ['uid'] 
      path = File.join(Rails.root,"db/uid3") 
      @compare_uids = {}
      File.open(path,"r").each do|line|
         uid = line.strip
         @compare_uids[uid] ||=  1
         !@compare_uids[uid].nil? if @compare_uids[uid] +=1
      end
       @compare_uids.keys.each do |line|
         uid = line
         csv << [uid]
       end
  end
    
  #得到指定用户的标签(这个有问题)
  @uids = %w{}
  filename = "get_tags_by_uid.csv"
  CSV.open filename,"wb" do |csv|
    @uids = open '/home/rails/Desktop/uuu.rb'#文件的路径
    @uids = @uids.read
    @uids = @uids.strip.split("\n")
    csv << %w{uid tags}
    tagss = []
    @uids.each do |uid|
      tagss << MUser.find(uid).tags
      csv << [uid,tagss]
    end
  end

  #转发 评论 主动AT 次数
  
  filename = "互动AT次数2014.csv"  
  CSV.open filename,"wb" do |csv|
    csv << %w{uid 转发 评论 主动@}
    start_time = '2014-07-01'
    end_time = '2014-09-01'
    intel = 2637370927 #2295615873   #2637370247 3869439663 2637370927,
    path = File.join(Rails.root, "db/uuu.rb")
    File.open(path,"r").each do |uid|
       uid = uid.strip
       comments = WeiboComment.where("uid = ? and comment_uid = ? and comment_at between ?   and ?",intel,uid,start_time,end_time).count
       forwards = WeiboForward.where("uid = ? and forward_uid = ? and forward_at between ?   and ?",intel,uid,start_time,end_time).count
       mention = WeiboMention.where("uid = ? and mention_uid = ? and mention_at between ?   and ?",intel,uid,start_time,end_time).count
       csv << [uid,forwards,comments,mention]
    end
  end

  #英特尔芯品汇 06-12至今的新增有效粉丝信息(:还能获取信息的粉丝信息),然后与附加已有的uid进行合并
  
  #根据name查询这个微博用户的基本信息

  task = GetUserTagsTask.new
  filename = "get_infor_by_name.csv"
  CSV.open filename,"wb" do |csv|
    csv << WeiboAccount.to_row_title(:quality) #如果导出的数据列太多的话可以通过:to_row_title(:quality)的这个方法直接生成这个微博用户的所有列
    path = File.join(Rails.root,"db/name")
    File.open(path,"r").each do |line|
      name = line.strip
      #根据name得到uid
      uids = ReportUtils.names_to_uids([name],true)
      if uids.size == 0
        csv << [name]
        next
      end
      weibo = task.load_weibo_user(uids[0])
      csv << weibo.to_row(:quality)
    end
  end

  #根据uid查询用户基本信息
  
  filename = "基本信息-现在是中国粉丝-2.csv"
  task = GetUserTagsTask.new
  CSV.open filename,"wb" do |csv|
  path = File.join(Rails.root, "db/uid1")
   title = WeiboAccount.to_row_title(:full) #作用同上
   csv << title #等价于 %w{sdf sdf sdf sdf sdf sdf}
  File.open(path,"r").each do|uid|
     uid = uid.strip
      begin
       account = task.load_weibo_user(uid)
       rescue Exception =>e
         if e.message =~
            csv << [uid]
            next
         end
       end
      if account.blank?
          csv << [uid]
          next
      end
      csv << account.to_row(:full) #给一列的数据转换成一行的数据(让它以行的形式显示)
      end
  end
  
  #begin
  英特尔芯品汇:2637370247
  英特尔中国:2637370927
  武汉万达汉秀:3318508000
  金融街购物中心微博:1924531943
  北京宠爱国际动物医院:3869439663
  英特尔商用频道:2295615873
  #end
  




